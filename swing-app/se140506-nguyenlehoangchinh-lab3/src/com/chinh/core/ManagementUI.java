/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chinh.core;

import com.chinh.employee.EmployeeDTO;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Admin
 */
public class ManagementUI extends javax.swing.JFrame {

    private ArrayList<EmployeeDTO> employees = new ArrayList<>();
    private EmployeeDTO lastSelectedEmployee = null;

    /**
     * Creates new form MainForm
     */
    public ManagementUI() {
        initComponents();
        centreWindow(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderRadioButton = new javax.swing.ButtonGroup();
        main = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        registrationsInfomationTable = new javax.swing.JTable();
        sortByNameLabel = new javax.swing.JLabel();
        CmbSortByName = new javax.swing.JComboBox<>();
        btnSearchByName = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();
        btnGetAllData = new javax.swing.JButton();
        detail = new javax.swing.JPanel();
        employeeIDLabel = new javax.swing.JLabel();
        fullNameLabel = new javax.swing.JLabel();
        birthdayLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        departmentLabel = new javax.swing.JLabel();
        checkListLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        checkbox_dermatology_exam = new javax.swing.JCheckBox();
        checkbox_physical_exam = new javax.swing.JCheckBox();
        checkbox_eye_exam = new javax.swing.JCheckBox();
        checkbox_chest_xray = new javax.swing.JCheckBox();
        checkbox_blood_count_chem = new javax.swing.JCheckBox();
        checkbox_dental_exam = new javax.swing.JCheckBox();
        checkbox_stomach_ultrasound = new javax.swing.JCheckBox();
        checkbox_electrocardiogram = new javax.swing.JCheckBox();
        CmbDepartment = new javax.swing.JComboBox<>();
        txtPhone = new javax.swing.JTextField();
        birthdayChooser = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        maleRadioButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        txtFullName = new javax.swing.JTextField();
        txtEmloyeeID = new javax.swing.JTextField();
        btnSearchByID = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        bntAddNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        tittle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        main.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 255), 2), "Main part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(51, 51, 255))); // NOI18N

        registrationsInfomationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Full name", "Age", "Gender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        registrationsInfomationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registrationsInfomationTableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(registrationsInfomationTable);

        sortByNameLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        sortByNameLabel.setText("Sort By Name:");

        CmbSortByName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ASC", "DSC" }));
        CmbSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmbSortByNameActionPerformed(evt);
            }
        });

        btnSearchByName.setText("Search By Name:");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        txtSearchByName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchByNameKeyTyped(evt);
            }
        });

        btnGetAllData.setText("Get All Data");
        btnGetAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayout.createSequentialGroup()
                        .addComponent(sortByNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CmbSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainLayout.createSequentialGroup()
                        .addComponent(btnSearchByName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainLayout.createSequentialGroup()
                        .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGetAllData))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortByNameLabel)
                    .addComponent(CmbSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchByName)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(btnGetAllData)
                .addGap(40, 40, 40))
        );

        detail.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 255), 2), "Detailed part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(51, 51, 255))); // NOI18N

        employeeIDLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        employeeIDLabel.setText("Employee ID:");

        fullNameLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        fullNameLabel.setText("Full name:");

        birthdayLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        birthdayLabel.setText("Birthday:");

        emailLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        emailLabel.setText("Email:");

        departmentLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        departmentLabel.setText("Department:");

        checkListLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        checkListLabel.setText("Check list:");

        addressLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        addressLabel.setText("Address to receive result:");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAddressKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtAddress);

        checkbox_dermatology_exam.setText("Dermatology");

        checkbox_physical_exam.setText("Physical exam");

        checkbox_eye_exam.setText("Eye exam");

        checkbox_chest_xray.setText("Chest X-ray");

        checkbox_blood_count_chem.setText("Blood count and chemistry");

        checkbox_dental_exam.setText("Dental exam");

        checkbox_stomach_ultrasound.setText("Stomach ultrasound");

        checkbox_electrocardiogram.setText("Electrocardiogram");

        CmbDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Business Administration", "Information Technology", "Graphic Design", "English Language", "Japanese Language", "Korean Language" }));

        txtPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPhoneKeyTyped(evt);
            }
        });

        birthdayChooser.setDateFormatString("yyyy/MM/dd");
        birthdayChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                birthdayChooserPropertyChange(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel9.setText("Gender:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel10.setText("Phone:");

        genderRadioButton.add(maleRadioButton);
        maleRadioButton.setSelected(true);
        maleRadioButton.setText("Male");

        genderRadioButton.add(femaleRadioButton);
        femaleRadioButton.setText("Female");

        txtFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFullNameKeyTyped(evt);
            }
        });

        txtEmloyeeID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtEmloyeeIDMouseClicked(evt);
            }
        });
        txtEmloyeeID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmloyeeIDKeyTyped(evt);
            }
        });

        btnSearchByID.setText("Search");
        btnSearchByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByIDActionPerformed(evt);
            }
        });

        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmailKeyTyped(evt);
            }
        });

        bntAddNew.setText("Add New");
        bntAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntAddNewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout detailLayout = new javax.swing.GroupLayout(detail);
        detail.setLayout(detailLayout);
        detailLayout.setHorizontalGroup(
            detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressLabel)
                    .addComponent(employeeIDLabel)
                    .addComponent(fullNameLabel)
                    .addComponent(birthdayLabel)
                    .addComponent(emailLabel)
                    .addComponent(departmentLabel)
                    .addComponent(checkListLabel))
                .addGap(18, 18, 18)
                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailLayout.createSequentialGroup()
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(detailLayout.createSequentialGroup()
                                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(birthdayChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                    .addComponent(CmbDepartment, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(31, 31, 31)
                                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(detailLayout.createSequentialGroup()
                                        .addComponent(maleRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(femaleRadioButton))
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(detailLayout.createSequentialGroup()
                                .addComponent(checkbox_dermatology_exam)
                                .addGap(18, 18, 18)
                                .addComponent(checkbox_dental_exam)
                                .addGap(18, 18, 18)
                                .addComponent(checkbox_stomach_ultrasound)
                                .addGap(18, 18, 18)
                                .addComponent(checkbox_electrocardiogram))
                            .addGroup(detailLayout.createSequentialGroup()
                                .addComponent(checkbox_physical_exam)
                                .addGap(18, 18, 18)
                                .addComponent(checkbox_eye_exam)
                                .addGap(18, 18, 18)
                                .addComponent(checkbox_chest_xray)
                                .addGap(18, 18, 18)
                                .addComponent(checkbox_blood_count_chem))
                            .addGroup(detailLayout.createSequentialGroup()
                                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtFullName)
                                    .addComponent(txtEmloyeeID, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchByID)))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailLayout.createSequentialGroup()
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(detailLayout.createSequentialGroup()
                                .addComponent(bntAddNew)
                                .addGap(133, 133, 133)
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete))
                            .addComponent(jScrollPane1))
                        .addGap(64, 64, 64))))
        );
        detailLayout.setVerticalGroup(
            detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeIDLabel)
                    .addComponent(txtEmloyeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByID))
                .addGap(35, 35, 35)
                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullNameLabel)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailLayout.createSequentialGroup()
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(birthdayLabel)
                            .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(maleRadioButton)
                                .addComponent(femaleRadioButton)))
                        .addGap(35, 35, 35)
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLabel)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(departmentLabel)
                            .addComponent(CmbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkListLabel)
                            .addComponent(checkbox_physical_exam)
                            .addComponent(checkbox_eye_exam)
                            .addComponent(checkbox_chest_xray)
                            .addComponent(checkbox_blood_count_chem))
                        .addGap(38, 38, 38)
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkbox_dermatology_exam)
                            .addComponent(checkbox_dental_exam)
                            .addComponent(checkbox_stomach_ultrasound)
                            .addComponent(checkbox_electrocardiogram))
                        .addGap(33, 33, 33)
                        .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(birthdayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(detailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntAddNew)
                    .addComponent(btnDelete)
                    .addComponent(btnSave))
                .addGap(51, 51, 51))
        );

        tittle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tittle.setForeground(new java.awt.Color(51, 0, 204));
        tittle.setText("General Health Check Registration Information Management ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(main, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addComponent(tittle)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tittle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // validation for employeeID
    private void txtEmloyeeIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmloyeeIDKeyTyped
        char c = evt.getKeyChar();
        String employeeID = txtEmloyeeID.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (employeeID + c).length();

        if (length > 10) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The EmployeeID field max length is 10!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isLetterOrDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The EmployeeID must not contains special characters(Ex:EM001)!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (Character.isLowerCase(c)) {
            String input = employeeID.toUpperCase();
            txtEmloyeeID.setText(input + String.valueOf(c).toUpperCase());
            evt.consume();
        }
    }//GEN-LAST:event_txtEmloyeeIDKeyTyped

    // check and show message, employee text field editable status
    private void txtEmloyeeIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEmloyeeIDMouseClicked
        boolean checkEditable = txtEmloyeeID.isEditable();
        if (!checkEditable) {
            JOptionPane.showMessageDialog(this, "You cannot edit this field at this time! Please click the 'Add New' button to enable editing.", "Messagage",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_txtEmloyeeIDMouseClicked

    // validation for fullname
    private void txtFullNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFullNameKeyTyped
        String fullName = txtFullName.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((fullName + c).length() > 50) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Full Name field max length is 50", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isAlphabetic(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Full Name field must only contain letters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtFullNameKeyTyped

    // control birthday value 
    private void birthdayChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_birthdayChooserPropertyChange
        String birthday = ((JTextField) birthdayChooser.getDateEditor().getUiComponent()).getText();
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        LocalDate today = LocalDate.now();
        Date tmpDate;

        try {
            tmpDate = df.parse(birthday);
            LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Period period = Period.between(birthdate, today);
            int age = period.getYears();
            if (age < 18) {
                JOptionPane.showMessageDialog(this, "Your age must be more than 17 years old to register!", "Message", JOptionPane.ERROR_MESSAGE);
                birthdayChooser.setDate(null);
            } else if (age > 65) {
                JOptionPane.showMessageDialog(this, "Your age can't be more than 65 years old!", "Message", JOptionPane.ERROR_MESSAGE);
                birthdayChooser.setDate(null);
            }
        } catch (ParseException e) {
            System.out.println(e);
        }

        JTextFieldDateEditor editor = (JTextFieldDateEditor) birthdayChooser.getDateEditor();
        editor.setEditable(false);
    }//GEN-LAST:event_birthdayChooserPropertyChange

    // validation for email
    private void txtEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyTyped
        String email = txtEmail.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (email + c).length();

        if (length > 64) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Email field's max length is 64!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtEmailKeyTyped

    // validation for phone
    private void txtPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPhoneKeyTyped
        String phone = txtPhone.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((phone + c).length() > 15) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Phone field's max length is 15!", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Phone field must contain digits (0-9) only!", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtPhoneKeyTyped

    // validation for address
    private void txtAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyTyped
        String address = txtAddress.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        String regex = "^[a-zA-Z0-9/ -]*$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(Character.toString(c));
        boolean isMatch = matcher.find();

        if ((address + c).length() > 150) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Address's max length is 150!", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!isMatch) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Address field must only contain letters, digits, spaces, dashes (-) and slashes (/)!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtAddressKeyTyped

    // validation for search by name
    private void txtSearchByNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchByNameKeyTyped
        String searchValue = txtSearchByName.getText();
        char c = evt.getKeyChar();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        if ((searchValue + c).length() > 50) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Search Value field max length is 50", "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isAlphabetic(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Search Value field must only contain letters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSearchByNameKeyTyped

    // get all data -> load it in table
    private void btnGetAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllDataActionPerformed
        clearDetailFields();

        if (employees.isEmpty()) {
            JOptionPane.showMessageDialog(this, "There are no employees registered in the system. Please create a new employee to begin.",
                    "Message", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        reloadTable();
    }//GEN-LAST:event_btnGetAllDataActionPerformed

    // click a row on table -> show detail infor
    private void registrationsInfomationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_registrationsInfomationTableMouseClicked
        reloadDetailFields();
    }//GEN-LAST:event_registrationsInfomationTableMouseClicked

    // clear all field -> prepare for create and update infor
    private void bntAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAddNewActionPerformed
        txtEmloyeeID.setEditable(true);
        registrationsInfomationTable.getSelectionModel().clearSelection();
        clearDetailFields();
    }//GEN-LAST:event_bntAddNewActionPerformed

    // save button include create + update function
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        String employeeID = txtEmloyeeID.getText();
        String fullName = txtFullName.getText();
        String birthday = ((JTextField) birthdayChooser.getDateEditor().getUiComponent()).getText();
        boolean gender = maleRadioButton.isSelected();
        String email = txtEmail.getText();
        String phone = txtPhone.getText();
        String department = (String) CmbDepartment.getSelectedItem();
        String checkList = getNameCheckboxIsSelected();
        String address = txtAddress.getText();

        if (!checkEmptyField()) {
            JOptionPane.showMessageDialog(this, "Please fill out all your information fields before save or update the registration!",
                    "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!checkLengthAllField()) {
            return;
        }

        if (!checkEmailFormat()) {
            JOptionPane.showMessageDialog(this, "Invalid Email format!",
                    "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int row = registrationsInfomationTable.getSelectedRow();
        if (row == -1) {
            if (employees != null) {
                if (checkExistedEmployeeID(employeeID)) {
                    JOptionPane.showMessageDialog(this, "This employee ID already exists! Please choose a different ID!",
                            "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (checkExitedPhone(phone)) {
                    JOptionPane.showMessageDialog(this, "This phone already exists! Please choose a different phone number!",
                            "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (checkExistedEmail(email)) {
                    JOptionPane.showMessageDialog(this, "This email already exists! Please choose a different email!",
                            "Message", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            // create new employee infor
            createNewEmployeeRegisInfor(employeeID, fullName, birthday, gender, email, phone, department, checkList, address);
        } else {
            if (checkExitedPhone(phone) && !getEmployeeByID(employeeID).getPhone().equals(phone)) {
                JOptionPane.showMessageDialog(this, "This phone already exists! Please choose a different phone number!",
                        "Message", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (checkExistedEmail(email) && !getEmployeeByID(employeeID).getEmail().equals(email)) {
                JOptionPane.showMessageDialog(this, "This email already exists! Please choose a different email!",
                        "Message", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // update employee infor
            updateEmployeeRegisInfor(employeeID, fullName, birthday, gender, email, phone, department, checkList, address);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    // delete a employee registration information
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String employeeID = txtEmloyeeID.getText();

        int row = registrationsInfomationTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row that you want to delete!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int option = JOptionPane.showConfirmDialog(this, "Are you sure to delete this employee registration information!", "Message", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            for (EmployeeDTO o : employees) {
                if (o.getEmployeeID().equals(employeeID)) {
                    employees.remove(o);
                    break;
                }
            }
            JOptionPane.showMessageDialog(this, "Delete success.", "Message", JOptionPane.INFORMATION_MESSAGE);
            clearDetailFields();
            reloadTable();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // search by employee id
    private void btnSearchByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByIDActionPerformed
        String employeeID = txtEmloyeeID.getText();

        if (registrationsInfomationTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "The table is empty! Please click 'Get All Data' button to fill data into the table.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (employeeID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input EmployeeID to search!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (getEmployeeByID(employeeID) != null) {
            registrationsInfomationTable.clearSelection();
            for (int i = 0; i < registrationsInfomationTable.getRowCount(); i++) {
                String registrationIDTable = (String) registrationsInfomationTable.getValueAt(i, 0);
                if (employeeID.equals(registrationIDTable)) {
                    registrationsInfomationTable.setRowSelectionInterval(i, i);
                    reloadDetailFieldsForSearchByID(getEmployeeByID(employeeID));
                    txtEmloyeeID.setEditable(false);
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Employee was found with the ID: " + employeeID, "Message", JOptionPane.ERROR_MESSAGE);
            clearDetailFields();
        }
    }//GEN-LAST:event_btnSearchByIDActionPerformed

    // search by employee's name
    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed

        txtEmloyeeID.setEditable(true);
        clearDetailFields();

        if (registrationsInfomationTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "The table is empty! Please click 'Get All Data' button to fill data into the table.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String searchValue = txtSearchByName.getText();
        if (searchValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input a Employee's name to search!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (employees == null) {
            JOptionPane.showMessageDialog(this, "The registration data is empty! No employee created yet!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        List<EmployeeDTO> matchingDataList = new ArrayList<>();
        for (EmployeeDTO o : employees) {
            if (o.getFullName().toLowerCase().contains(searchValue.toLowerCase())) {
                matchingDataList.add(o);
            }
        }
        if (matchingDataList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No employee found for the given name!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        reloadTableBySearchName(matchingDataList);
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    // sort by employee's name
    private void CmbSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmbSortByNameActionPerformed
        if (registrationsInfomationTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "The table is empty! Please click 'Get All Data' button to fill data into the table.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String sortType = (String) CmbSortByName.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) registrationsInfomationTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        registrationsInfomationTable.setRowSorter(sorter);

        if (sortType.equalsIgnoreCase("asc")) {
            List<RowSorter.SortKey> sortKeys = new ArrayList<>();
            sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
            sorter.setSortKeys(sortKeys);
            sorter.sort();
        } else {
            List<RowSorter.SortKey> sortKeys = new   ArrayList<>();
            sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
            sorter.setSortKeys(sortKeys);
            sorter.sort();
        }
        clearDetailFields();
    }//GEN-LAST:event_CmbSortByNameActionPerformed

    // create new employee registration information
    private void createNewEmployeeRegisInfor(String employeeID, String fullName, String birthday,
            boolean gender, String email, String phone, String department, String checkList, String address) {

        // parse birthday
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        java.sql.Date parsedDate;
        try {
            java.util.Date utilDate = format.parse(birthday);
            parsedDate = new java.sql.Date(utilDate.getTime());
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Create failed!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // save new employee
        employees.add(new EmployeeDTO(employeeID, fullName, parsedDate, gender, email, phone, department, checkList, address));
        System.out.println(employees);

        JOptionPane.showMessageDialog(this, "Create success.", "Message", JOptionPane.INFORMATION_MESSAGE);
        clearDetailFields();
        reloadTable();
    }

    // update employee registration information
    private void updateEmployeeRegisInfor(String employeeID, String fullName, String birthday,
            boolean gender, String email, String phone, String department, String checkList, String address) {

        // parse birthday
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        java.sql.Date parsedDate;
        try {
            java.util.Date utilDate = format.parse(birthday);
            parsedDate = new java.sql.Date(utilDate.getTime());
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Update failed!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean check = false;
        for (EmployeeDTO o : employees) {
            if (o.getEmployeeID().equals(employeeID)) {
                o.setEmployeeID(employeeID); // 1
                o.setFullName(fullName); // 2
                o.setBirthday(parsedDate); // 3
                o.setGender(gender); // 4
                o.setEmail(email); // 5 
                o.setPhone(phone); // 6
                o.setDepartment(department); // 7
                o.setCheckList(checkList); // 8
                o.setAddress(address); // 9
                check = true;
                break;
            }
        }

        if (check) {
            JOptionPane.showMessageDialog(this, "Update success", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Update failed!", "Message", JOptionPane.ERROR_MESSAGE);
        }

        // update employee infor
        reloadDetailFields();
        reloadTableForUpdateVersion();
    }

    // check empty all field
    private boolean checkEmptyField() {
        String[] fields = {txtEmloyeeID.getText(), txtFullName.getText(),
            ((JTextField) birthdayChooser.getDateEditor().getUiComponent()).getText(),
            txtEmail.getText(), txtPhone.getText(), txtAddress.getText()};

        for (String field : fields) {
            if (field.isEmpty()) {
                return false;
            }
        }

        List<JCheckBox> checkBoxList = new ArrayList<>();
        checkBoxList.add(checkbox_physical_exam);
        checkBoxList.add(checkbox_eye_exam);
        checkBoxList.add(checkbox_chest_xray);
        checkBoxList.add(checkbox_blood_count_chem);
        checkBoxList.add(checkbox_dermatology_exam);
        checkBoxList.add(checkbox_dental_exam);
        checkBoxList.add(checkbox_stomach_ultrasound);
        checkBoxList.add(checkbox_electrocardiogram);

        int countSelected = 0;
        for (JCheckBox checkBox : checkBoxList) {
            if (checkBox.isSelected()) {
                countSelected++;
                break;
            }
        }

        return countSelected != 0;
    }

    // check min length all field
    private boolean checkLengthAllField() {
        String employeeID = txtEmloyeeID.getText();
        String fullName = txtFullName.getText().trim();
        String email = txtEmail.getText();
        String phone = txtPhone.getText();
        String address = txtAddress.getText().trim();

        boolean check = true;
        if (employeeID.length() < 5) {
            JOptionPane.showMessageDialog(this, "The EmployeeID must be at least 5 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (fullName.length() < 3) {
            JOptionPane.showMessageDialog(this, "The FullName must be at least 3 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (email.length() < 11) {
            JOptionPane.showMessageDialog(this, "The Email must be at least 11 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (phone.length() < 10) {
            JOptionPane.showMessageDialog(this, "The Phone must be at least 10 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (address.length() < 5) {
            JOptionPane.showMessageDialog(this, "The Address must be at least 5 characters long!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return check;
    }

    // check email format
    private boolean checkEmailFormat() {
        String email = txtEmail.getText();
        String regex = "^[A-Za-z0-9_]+@gmail\\.com$";
        Pattern patern = Pattern.compile(regex);
        Matcher matcher = patern.matcher(email);
        return matcher.matches();
    }

    // set checked box for detail part
    private void setCheckboxValue(String item, JCheckBox checkbox, String itemName) {
        boolean isChecked = item.trim().contains(itemName);
        checkbox.setSelected(isChecked);
    }

    // get all seleted checkbox and return
    private String getNameCheckboxIsSelected() {
        List<JCheckBox> checkBoxList = new ArrayList<>();

        checkBoxList.add(checkbox_physical_exam);
        checkBoxList.add(checkbox_eye_exam);
        checkBoxList.add(checkbox_chest_xray);
        checkBoxList.add(checkbox_blood_count_chem);
        checkBoxList.add(checkbox_dermatology_exam);
        checkBoxList.add(checkbox_dental_exam);
        checkBoxList.add(checkbox_stomach_ultrasound);
        checkBoxList.add(checkbox_electrocardiogram);

        String allSelectedCheckbox = "";
        for (JCheckBox checkBox : checkBoxList) {
            if (checkBox.isSelected()) {
                allSelectedCheckbox += "," + checkBox.getText();
            }
        }
        return allSelectedCheckbox;
    }

    // clear all field in detail part
    private void clearDetailFields() {
        txtEmloyeeID.setText("");
        txtFullName.setText("");
        birthdayChooser.setDate(null);
        maleRadioButton.setSelected(true);
        txtEmail.setText("");
        txtPhone.setText("");
        CmbDepartment.setSelectedIndex(0);
        txtAddress.setText("");
//        checkbox_physical_exam.setSelected(false);
//        checkbox_eye_exam.setSelected(false);
//        checkbox_chest_xray.setSelected(false);
//        checkbox_blood_count_chem.setSelected(false);
//        checkbox_dermatology_exam.setSelected(false);
//        checkbox_dental_exam.setSelected(false);
//        checkbox_stomach_ultrasound.setSelected(false);
//        checkbox_electrocardiogram.setSelected(false);
    }

    // reload detail all detail fields after data changed
    private void reloadDetailFields() {
        txtEmloyeeID.setEditable(false);
        int row = registrationsInfomationTable.getSelectedRow();
        String employeeID = registrationsInfomationTable.getValueAt(row, 0).toString();

        EmployeeDTO employee = getEmployeeByID(employeeID);

        txtEmloyeeID.setText(employeeID);
        txtFullName.setText(employee.getFullName());
        birthdayChooser.setDate(employee.getBirthday());
        txtAddress.setText(employee.getAddress());
        txtEmail.setText(employee.getEmail());
        txtPhone.setText(employee.getPhone());
        maleRadioButton.setSelected(employee.isGender());
        femaleRadioButton.setSelected(!employee.isGender());

        int i = 0;
        while (true) {
            String department = CmbDepartment.getItemAt(i);
            if (department.equalsIgnoreCase(employee.getDepartment())) {
                CmbDepartment.setSelectedIndex(i);
                break;
            }
            i++;
        }

        String[] checkBoxNames = {"Physical exam", "Eye exam", "Chest X-ray", "Blood count and chemistry", "Dermatology", "Dental exam", "Stomach ultrasound", "Electrocardiogram"};
        JCheckBox[] checkBoxes = {checkbox_physical_exam, checkbox_eye_exam, checkbox_chest_xray, checkbox_blood_count_chem, checkbox_dermatology_exam, checkbox_dental_exam, checkbox_stomach_ultrasound, checkbox_electrocardiogram};
        if (lastSelectedEmployee == null || !lastSelectedEmployee.equals(employee)) {

            String[] listCheckedBox = employee.getCheckList().split(",");
            for (int j = 0; j < checkBoxNames.length; j++) {
                setCheckboxValue("", checkBoxes[j], checkBoxNames[j]); // clear all check boxes first
            }
            
            for (String o : listCheckedBox) {
                for (int j = 0; j < checkBoxNames.length; j++) {
                    if (o.trim().contains(checkBoxNames[j])) {
                        setCheckboxValue(o, checkBoxes[j], checkBoxNames[j]);
                    }
                }
            }

            lastSelectedEmployee = employee;
        }
    }

    private void reloadDetailFieldsForSearchByID(EmployeeDTO employee) {

        txtEmloyeeID.setEditable(false);

        txtEmloyeeID.setText(employee.getEmployeeID());
        txtFullName.setText(employee.getFullName());
        birthdayChooser.setDate(employee.getBirthday());
        txtAddress.setText(employee.getAddress());
        txtEmail.setText(employee.getEmail());
        txtPhone.setText(employee.getPhone());
        maleRadioButton.setSelected(employee.isGender());
        femaleRadioButton.setSelected(!employee.isGender());

        int i = 0;
        while (true) {
            String department = CmbDepartment.getItemAt(i);
            if (department.equalsIgnoreCase(employee.getDepartment())) {
                CmbDepartment.setSelectedIndex(i);
                break;
            }
            i++;
        }

        String[] checkBoxNames = {"Physical exam", "Eye exam", "Chest X-ray", "Blood count and chemistry", "Dermatology", "Dental exam", "Stomach ultrasound", "Electrocardiogram"};
        JCheckBox[] checkBoxes = {checkbox_physical_exam, checkbox_eye_exam, checkbox_chest_xray, checkbox_blood_count_chem, checkbox_dermatology_exam, checkbox_dental_exam, checkbox_stomach_ultrasound, checkbox_electrocardiogram};
        // Check if the selected employee has changed
        if (lastSelectedEmployee == null || !lastSelectedEmployee.equals(employee)) {
            // Update the detail fields with the new employee's information
            txtEmloyeeID.setText(employee.getEmployeeID());
            txtFullName.setText(employee.getFullName());
            // ... code here ...

            // Update the checkbox list for the new employee
            String[] listCheckedBox = employee.getCheckList().split(",");
            for (int j = 0; j < checkBoxNames.length; j++) {
                setCheckboxValue("", checkBoxes[j], checkBoxNames[j]); // Clear all checkboxes first
            }
            for (String o : listCheckedBox) {
                for (int j = 0; j < checkBoxNames.length; j++) {
                    if (o.trim().contains(checkBoxNames[j])) {
                        setCheckboxValue(o, checkBoxes[j], checkBoxNames[j]);
                    }
                }
            }

            // Update the last selected employee
            lastSelectedEmployee = employee;
        }
    }

    // reload table after data changed
    private void reloadTable() {
        DefaultTableModel model = (DefaultTableModel) registrationsInfomationTable.getModel();
        model.setRowCount(0);
        employees.forEach((o) -> {
            SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
            String birthday = df.format(o.getBirthday());
            LocalDate today = LocalDate.now();
            try {
                Date tmpDate = df.parse(birthday);
                LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(birthdate, today);
                int age = period.getYears();
                model.addRow(new Object[]{
                    o.getEmployeeID(), o.getFullName(), age, o.isGender() == true ? "Male" : "Female"
                });
            } catch (ParseException e) {
                System.out.println(e.getMessage());
            }
        });
    }

    // reaload table after update regis infor
    private void reloadTableForUpdateVersion() {
        DefaultTableModel model = (DefaultTableModel) registrationsInfomationTable.getModel();
        int row = registrationsInfomationTable.getSelectedRow();
        model.setRowCount(0);
        employees.forEach((o) -> {
            SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
            String birthday = df.format(o.getBirthday());
            LocalDate today = LocalDate.now();
            try {
                Date tmpDate = df.parse(birthday);
                LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(birthdate, today);
                int age = period.getYears();
                model.addRow(new Object[]{
                    o.getEmployeeID(), o.getFullName(), age, o.isGender() == true ? "Male" : "Female"
                });
            } catch (ParseException e) {
                System.out.println(e.getMessage());
            }
        });
        registrationsInfomationTable.setRowSelectionInterval(row, row);
    }

    // reload table after search by name
    private void reloadTableBySearchName(List<EmployeeDTO> empList) {
        DefaultTableModel model = (DefaultTableModel) registrationsInfomationTable.getModel();
        model.setRowCount(0);
        empList.forEach((o) -> {
            SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
            String birthday = df.format(o.getBirthday());
            LocalDate today = LocalDate.now();
            try {
                Date tmpDate = df.parse(birthday);
                LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                Period period = Period.between(birthdate, today);
                int age = period.getYears();
                model.addRow(new Object[]{
                    o.getEmployeeID(), o.getFullName(), age, o.isGender() == true ? "Male" : "Female"
                });
            } catch (ParseException e) {
                System.out.println(e.getMessage());
            }
        });
    }

    // check if employeeID has already existed then return true, else return false
    private boolean checkExistedEmployeeID(String employeeID) {
        boolean check = false;
        for (EmployeeDTO o : employees) {
            if (o.getEmployeeID().equals(employeeID)) {
                check = true;
                break;
            }
        }
        return check;
    }

    // check if employee's email has already existed then return true, else return false
    private boolean checkExistedEmail(String email) {
        boolean check = false;
        for (EmployeeDTO o : employees) {
            if (o.getEmail().equals(email)) {
                check = true;
                break;
            }
        }
        return check;
    }

    // check if employee's email has already existed then return true, else return false
    private boolean checkExitedPhone(String phone) {
        boolean check = false;
        for (EmployeeDTO o : employees) {
            if (o.getPhone().equals(phone)) {
                check = true;
                break;
            }
        }
        return check;
    }

    // find an employee by id in ArrayList, if found then return
    private EmployeeDTO getEmployeeByID(String employeeID) {
        EmployeeDTO employee = null;

        for (EmployeeDTO o : employees) {
            if (o.getEmployeeID().equals(employeeID)) {
                employee = o;
                break;
            }
        }
        return employee;
    }

    // center form
    private static void centreWindow(Window frame) {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        frame.setLocation(x, y);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagementUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagementUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CmbDepartment;
    private javax.swing.JComboBox<String> CmbSortByName;
    private javax.swing.JLabel addressLabel;
    private com.toedter.calendar.JDateChooser birthdayChooser;
    private javax.swing.JLabel birthdayLabel;
    private javax.swing.JButton bntAddNew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetAllData;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByID;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.JLabel checkListLabel;
    private javax.swing.JCheckBox checkbox_blood_count_chem;
    private javax.swing.JCheckBox checkbox_chest_xray;
    private javax.swing.JCheckBox checkbox_dental_exam;
    private javax.swing.JCheckBox checkbox_dermatology_exam;
    private javax.swing.JCheckBox checkbox_electrocardiogram;
    private javax.swing.JCheckBox checkbox_eye_exam;
    private javax.swing.JCheckBox checkbox_physical_exam;
    private javax.swing.JCheckBox checkbox_stomach_ultrasound;
    private javax.swing.JLabel departmentLabel;
    private javax.swing.JPanel detail;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel employeeIDLabel;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JLabel fullNameLabel;
    private javax.swing.ButtonGroup genderRadioButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel main;
    private javax.swing.JRadioButton maleRadioButton;
    private javax.swing.JTable registrationsInfomationTable;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel sortByNameLabel;
    private javax.swing.JLabel tittle;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmloyeeID;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSearchByName;
    // End of variables declaration//GEN-END:variables
}
